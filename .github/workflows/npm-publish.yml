name: NPM Publish
run-name: Publish ${{ inputs.prerelease && 'prerelease ' || '' }}NPM package to `${{ inputs.jfrog-npm-repository }}`

on:
  workflow_call:
    inputs:
      git-branch-ref-regex:
        description: Regular expression to enable matching branch refs with prereleases
        type: string
        required: false
        default: (main)
      jfrog-build-name:
        description: JFrog build name to associate with publish
        type: string
        required: false
      jfrog-build-number:
        description: JFrog build number to associate with publish
        type: string
        required: false
      jfrog-npm-repository:
        description: JFrog repository to authenticate and publish
        type: string
        required: true
      jfrog-npm-repository-resolve:
        description: JFrog repository to resolve dependencies
        type: string
        required: false
        default: octaura-npm-release-virtual
      jfrog-url:
        description: URL to JFrog platform
        type: string
        required: true
      node-cache:
        description: Set to empty string to disable cache
        type: string
        required: false
        default: npm
      node-version:
        description: Target Node.js version
        type: string
        required: false
        default: 24
      npm-distribution-tag:
        description: NPM distribution tag to apply to publish
        type: string
        required: false
      npm-publish:
        description: Run NPM publish command
        type: boolean
        required: false
        default: true
      package-json-file-path:
        description: Target package.json file
        type: string
        required: false
        default: package.json
      prerelease:
        description: Publish prerelease version of package
        type: boolean
        required: false
        default: false
    secrets:
      jfrog-access-token:
        description: Access token for NPM registry
        required: true

jobs:
  publish:
    name: Publish ${{ inputs.prerelease && 'prerelease ' || '' }}NPM package to `${{ inputs.jfrog-npm-repository }}`
    runs-on: ubuntu-latest
    env:
      DEFAULT_NPM_DISTRIBUTION_TAG: latest
      INPUT_GIT_BRANCH_REF_REGEX: ${{ inputs.git-branch-ref-regex }}
      INPUT_NPM_DISTRIBUTION_TAG: ${{ inputs.npm-distribution-tag }}
      INPUT_NPM_PUBLISH: ${{ inputs.npm-publish }}
      JFROG_BUILD_NAME: ${{ inputs.jfrog-build-name }}
      JFROG_BUILD_NUMBER: ${{ inputs.jfrog-build-number }}
      JFROG_URL: ${{ inputs.jfrog-url }}
      JFROG_ACCESS_TOKEN: ${{ secrets.jfrog-access-token }}
      JFROG_NPM_REPOSITORY_DEPLOY: ${{ inputs.jfrog-npm-repository }}
      JFROG_NPM_REPOSITORY_RESOLVE: ${{ inputs.jfrog-npm-repository-resolve }}
      PACKAGE_JSON_FILE_PATH: ${{ inputs.package-json-file-path }}
      PRERELEASE: ${{ inputs.prerelease }}

    steps:
      - uses: actions/checkout@v5

      - name: Configure NPM registry
        id: npm-registry
        run: |
          JFROG_HOST="$(node --print "new URL(process.env.JFROG_URL).host")"
          NPM_REGISTRY="$JFROG_HOST/artifactory/api/npm/$JFROG_NPM_REPOSITORY_RESOLVE"
          echo "npm-registry=$NPM_REGISTRY" | tee --append "$GITHUB_OUTPUT"

      - uses: actions/setup-node@v5
        with:
          node-version: ${{ inputs.node-version }}
          cache: ${{ inputs.node-cache }}
          registry-url: https://${{ steps.npm-registry.outputs.npm-registry }}/

      - name: Configure NPM CLI
        env:
          NPM_REGISTRY: ${{ steps.npm-registry.outputs.npm-registry }}
          NPM_REGISTRY_AUTH_TOKEN: ${{ secrets.jfrog-access-token }}
        run: |
          npm config set "//${NPM_REGISTRY}/:_authToken" "$NPM_REGISTRY_AUTH_TOKEN"
          npm config set loglevel http
          npm config list --long

      - name: Get package name from ${{ env.PACKAGE_JSON_FILE_PATH }}
        uses: octaura/get-property-action@v1
        id: package-json-name
        with:
          file: ${{ env.PACKAGE_JSON_FILE_PATH }}
          key-path: |
            name

      - name: Get original package version from ${{ env.PACKAGE_JSON_FILE_PATH }}
        uses: octaura/get-property-action@v1
        id: package-json-version
        with:
          file: ${{ env.PACKAGE_JSON_FILE_PATH }}
          key-path: |
            version

      - name: Get Git information
        id: git
        run: |
          BRANCH_REF_NAME="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
          echo "branch-ref-name=$BRANCH_REF_NAME" | tee --append "$GITHUB_OUTPUT"

      - name: Configure NPM package distribution tag for `${{ steps.package-json-name.outputs.value }}`
        id: npm-distribution-tag
        env:
          GIT_BRANCH_REF_NAME: ${{ steps.git.outputs.branch-ref-name}}
          PRERELEASE_SPRINT_BRANCH_REGEX: '^sprint\/([a-zA-Z0-9_]+)$'
          NPM_DISTRIBUTION_TAG_VALIDATION_REGEX: ^[0-9vV]
          TICKET_ID_REGEX: "((OCDEV|OCDA)-[0-9]+)"
        run: |
          if [[ -n $INPUT_NPM_DISTRIBUTION_TAG && $INPUT_NPM_DISTRIBUTION_TAG =~ $NPM_DISTRIBUTION_TAG_VALIDATION_REGEX ]]; then
            echo "Invalid NPM distribution tag provided: \`$INPUT_NPM_DISTRIBUTION_TAG\`"
            exit 1
          fi

          if [[ $PRERELEASE == 'true' ]]; then
            if [[ -n $INPUT_NPM_DISTRIBUTION_TAG ]]; then
              NPM_PRERELEASE_ID="$INPUT_NPM_DISTRIBUTION_TAG"
            elif [[ $GIT_BRANCH_REF_NAME =~ $PRERELEASE_SPRINT_BRANCH_REGEX ]]; then
              SPRINT_VERSION="${BASH_REMATCH[1]}"
              echo "Sprint branch: $SPRINT_VERSION"
              NPM_PRERELEASE_ID="$SPRINT_VERSION"
              NPM_PRERELEASE_ID="${NPM_PRERELEASE_ID//\//-}"
            elif [[ $GIT_BRANCH_REF_NAME =~ $TICKET_ID_REGEX ]]; then
              TICKET_ID="${BASH_REMATCH[1]}"
              echo "Ticket ID: $TICKET_ID"
              NPM_PRERELEASE_ID="$TICKET_ID"
              NPM_PRERELEASE_ID="${NPM_PRERELEASE_ID//\//-}"
            elif [[ $GIT_BRANCH_REF_NAME =~ $INPUT_GIT_BRANCH_REF_REGEX ]]; then
              NPM_PRERELEASE_ID="${GIT_BRANCH_REF_NAME//\//-}"
            else
              echo '::warning::Could not resolve prerelease ID'
              exit 0
            fi

            echo "NPM_PRERELEASE_ID=$NPM_PRERELEASE_ID"

            NPM_DISTRIBUTION_TAG="$NPM_PRERELEASE_ID"

            if [[ $NPM_DISTRIBUTION_TAG == 'latest' ]]; then
              echo "NPM distrbution tag cannot be \`latest\` for prereleases."
              exit 1
            fi
          else
            NPM_DISTRIBUTION_TAG="${INPUT_NPM_DISTRIBUTION_TAG:-$DEFAULT_NPM_DISTRIBUTION_TAG}"
          fi

          NPM_DISTRIBUTION_TAG="${NPM_DISTRIBUTION_TAG//_/-}"

          echo "distribution-tag=$NPM_DISTRIBUTION_TAG" | tee --append "$GITHUB_OUTPUT"

      - name: Configure NPM package version for `${{ steps.package-json-name.outputs.value }}`
        id: npm-package-version
        if: inputs.npm-publish == true
        env:
          JQ_QUERY_PACKAGE_JSON_VERSION: ".version"
          JQ_QUERY_VERSION_INCREMENT_PRERELEASE_LATEST: 'map(select(test("^\($version)\\."))) | last | select(. != null)'
          NPM_DISTRIBUTION_TAG: ${{ steps.npm-distribution-tag.outputs.distribution-tag }}
          PACKAGE_JSON_NAME: ${{ steps.package-json-name.outputs.value }}
          PACKAGE_JSON_VERSION: ${{ steps.package-json-version.outputs.value }}
        run: |
          if [[ -z $NPM_DISTRIBUTION_TAG ]]; then
            echo "Missing NPM package distribution tag."
            exit 1
          fi

          if [[ $PRERELEASE == 'true' ]]; then
            VERSION_INCREMENT="$(npx semver --coerce --increment minor "$PACKAGE_JSON_VERSION")"
            echo "Minor increment package version \`$PACKAGE_JSON_VERSION\` to \`$VERSION_INCREMENT\`"

            VERSION_SEARCH="$VERSION_INCREMENT-$NPM_DISTRIBUTION_TAG"
            VERSION_INCREMENT_PRERELEASE_LATEST="$(
              npm view "$PACKAGE_JSON_NAME" versions --json | \
              jq --arg version "$VERSION_SEARCH" --raw-output "$JQ_QUERY_VERSION_INCREMENT_PRERELEASE_LATEST"
            )"

            if [[ -z "$VERSION_INCREMENT_PRERELEASE_LATEST" ]]; then
              echo "No package versions found for $VERSION_SEARCH"
              npm version preminor --preid="$NPM_DISTRIBUTION_TAG" --no-git-tag-version
            else
              echo "Latest \`$VERSION_SEARCH\` prerelease is \`$VERSION_INCREMENT_PRERELEASE_LATEST\`"
              echo "Setting package version to latest prerelease package version, \`$VERSION_INCREMENT_PRERELEASE_LATEST\`"
              npm version "${VERSION_INCREMENT_PRERELEASE_LATEST}" --no-git-tag-version
              echo "Setting new prerelease package version"
              npm version prerelease --preid="$NPM_DISTRIBUTION_TAG" --no-git-tag-version
            fi
          fi

          FINAL_PACKAGE_JSON_VERSION="$(jq --raw-output "$JQ_QUERY_PACKAGE_JSON_VERSION" "$PACKAGE_JSON_FILE_PATH")"

          echo "version=$FINAL_PACKAGE_JSON_VERSION" | tee --append "$GITHUB_OUTPUT"

      - name: Check release version and package.json version match
        if: inputs.npm-publish == true && inputs.prerelease != true
        env:
          PACKAGE_JSON_VERSION: ${{ steps.package-json-version.outputs.value }}
        run: |
          if [[ "${GITHUB_REF_NAME#v}" == "$PACKAGE_JSON_VERSION" ]]; then
            echo "Git ref, $GITHUB_REF_NAME, matches package version, $PACKAGE_JSON_VERSION"
          else
            echo "Git ref, $GITHUB_REF_NAME, does not match package version, $PACKAGE_JSON_VERSION"
            exit 1
          fi

      - uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ inputs.jfrog-url }}
          JF_ACCESS_TOKEN: ${{ secrets.jfrog-access-token }}

      - name: Configure JFrog CLI
        env:
          FINAL_PACKAGE_JSON_VERSION: ${{ steps.npm-package-version.outputs.version }}
        run: |
          if [[ $INPUT_NPM_PUBLISH == 'true' ]]; then
            echo "JFROG_CLI_BUILD_NAME=$GITHUB_REPOSITORY" | tee --append "$GITHUB_ENV"
            echo "JFROG_CLI_BUILD_NUMBER=${FINAL_PACKAGE_JSON_VERSION#v}" | tee --append "$GITHUB_ENV"
          else
            echo "JFROG_CLI_BUILD_NAME=$JFROG_BUILD_NAME" | tee --append "$GITHUB_ENV"
            echo "JFROG_CLI_BUILD_NUMBER=$JFROG_BUILD_NUMBER" | tee --append "$GITHUB_ENV"
          fi

      - name: Configure NPM for JFrog
        env:
          SERVER_ID: octaura
        run: |
          jf config add "$SERVER_ID" --url="$JFROG_URL" --access-token="$JFROG_ACCESS_TOKEN" --interactive=false
          jf npm-config --server-id-deploy="$SERVER_ID" --repo-deploy="$JFROG_NPM_REPOSITORY_DEPLOY" --server-id-resolve="$SERVER_ID" --repo-resolve="$JFROG_NPM_REPOSITORY_RESOLVE"

      - name: Verify Artifactory is accessible
        run: jf rt ping

      - name: Verify NPM registry is accessible
        run: jf npm ping

      - run: jf npm ci # clean-install, refer to https://github.com/octaura/github-actions-workflows/pull/206

      - name: List installed NPM packages
        id: npm-list
        run: |
          NPM_LIST_COMMAND_OUTPUT=$(jf npm list --all --json)

          echo "dependency<<EOF"$'\n'"$NPM_LIST_COMMAND_OUTPUT"$'\n'EOF | tee --append "$GITHUB_OUTPUT"

      - name: Publish `${{ steps.npm-package-version.outputs.version }}` to `${{ inputs.jfrog-npm-repository }}` with tag `${{ steps.npm-distribution-tag.outputs.distribution-tag }}`
        if: inputs.npm-publish == true
        env:
          NPM_DISTRIBUTION_TAG: ${{ steps.npm-distribution-tag.outputs.distribution-tag }}
        run: jf npm publish --tag="$NPM_DISTRIBUTION_TAG" --detailed-summary

      - name: Publish build info
        run: |
          jf rt build-add-git
          jf rt build-publish --detailed-summary
